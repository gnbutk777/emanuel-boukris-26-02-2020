{"version":3,"sources":["hooks/ModalContext.js","api/weatherConfig.js","api/location.js","api/conditions.js","api/index.js","component/SearchBar/index.js","component/SearchBar/SearchBar.jsx","hooks/useDebounce.js","component/SelectdCityCard/index.js","component/SelectdCityCard/SelectdCityCard.jsx","component/FavHeartIcon/index.js","component/FavHeartIcon/FavHeartIcon.jsx","modules/favorites/actionsType.js","component/FavoritesButton/FavoritesButton.jsx","modules/favorites/actions.js","component/FavoritesButton/index.js","component/OneDayForcast/index.js","component/OneDayForcast/OneDayForcast.jsx","component/WeekSumCard/index.js","component/WeekSumCard/WeekSumCard.jsx","component/HomeCard/index.js","component/HomeCard/HomeCard.jsx","router/HomeScreen/HomeScreen.jsx","router/HomeScreen/index.js","component/FavoriteSingleCard/index.js","component/FavoriteSingleCard/FavoriteSingleCard.jsx","router/FavoritesScreen/index.js","router/FavoritesScreen/FavoritesScreen.jsx","router/routes.js","router/index.js","component/Navbar/Navbar.jsx","component/Navbar/index.js","component/Modal/index.js","component/Modal/Modal.jsx","modules/favorites/reducer.js","redux/index.js","App.js","serviceWorker.js","index.js"],"names":["React","createContext","weatherApi","baseUrl","apiKey","getCities","cityName","signal","fetch","then","response","json","catch","error","Error","currentconditionsBaseUrl","fiveDaysForecastsUrl","getFiveDaysForecasts","locationKey","getCurrConditions","api","locationApi","conditions","SearchBar","onSelectCity","useState","options","setoptions","value","setvalue","debouncedSearchTerm","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","setModalData","useContext","ModalContext","oldValue","a","cities","mapCities","map","city","name","LocalizedName","key","Key","console","log","message","controller","AbortController","abort","Row","className","Form","Group","as","Col","xs","md","labelKey","option","id","onInputChange","onChange","placeholder","SelectdCityCard","selectedCity","celsius","setcelsius","isLoading","setisLoading","currentKey","data","Temperature","Metric","Value","Card","style","width","Body","Title","Spinner","animation","size","Text","Math","round","FavHeartIcon","isFill","text","mapDispatchToProps","addCityToFavorites","type","actionsTypes","payload","removeCityFormFavorites","FavoritesButton","connect","state","favorites","cityKey","useSelector","some","favorite","ButtonGroup","Button","onClick","variant","OneDayForcast","day","temperature","WeekSumCard","selectedCityKey","Array","fill","fiveDaysData","setFiveDaysData","newData","DailyForecasts","oneDayData","Date","toString","slice","Minimum","Maximum","index","HomeCard","Container","defaultCity","HomeScreen","props","setselectedCity","length","FavoriteSingleCard","setData","weatherText","WeatherText","FavoritesScreen","Routes","Header","Footer","path","routesName","navConfigure","eventKey","isDisable","Navbar","history","useHistory","Nav","defaultActiveKey","onSelect","push","navElment","Link","Modal","modalData","isShowModal","title","show","onHide","aria-labelledby","closeButton","initialState","favoritesReducer","action","ActionsType","filter","cityData","store","createStore","App","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d33e6ee.chunk.js","sourcesContent":["import React from 'react';\n\n// export const modalTexts = {\n//     title:'',\n//     subtitle: ''\n// };\n\nexport default  React.createContext(null);","export const weatherApi = {\n    baseUrl: \"https://dataservice.accuweather.com\",\n    apiKey: 'o0dtCPGayAGc3EGwXK9FlWtNRH24AQ2f',\n}","import {weatherApi} from './weatherConfig';\n\n\nconst {baseUrl, apiKey } = weatherApi;\n\nconst locaCityUrl = \"/locations/v1/cities/autocomplete\";\n\nexport default {\n    getCities: (cityName, {signal}) => {\n        return fetch(\n            `${baseUrl}${locaCityUrl}?apikey=${apiKey}&q=${cityName}`,\n            {signal})\n        .then(response => response.json())\n        .then(json => json)\n        .catch(error => {\n             throw new Error(error);\n        })\n    },\n}","import {weatherApi} from './weatherConfig';\n\n\nconst {baseUrl, apiKey } = weatherApi;\n\nconst currentconditionsBaseUrl = `${baseUrl}/currentconditions/v1/`;\nconst fiveDaysForecastsUrl = `${baseUrl}/forecasts/v1/daily/5day/`;\n\nexport default {\n    getFiveDaysForecasts: (locationKey, {signal}) => {\n        return fetch(\n            `${fiveDaysForecastsUrl}${locationKey}?apikey=${apiKey}&metric=true`,\n            {signal})\n            .then(response => response.json())\n            .then(json => json)\n            .catch(error => {\n                throw new Error(error);\n           })\n    },\n    getCurrConditions: (locationKey, {signal}) => {\n        return fetch(\n            `${currentconditionsBaseUrl}${locationKey}?apikey=${apiKey}`,\n            {signal})\n        .then(response => response.json())\n        .then(json => json)\n        .catch(error => {\n            throw new Error(error);\n       })\n    },\n}","import locationApi from './location';\nimport conditions from './conditions';\n\nconst api = {\n    ...locationApi,\n    ...conditions\n}\nexport default api;\n","import SearchBar from './SearchBar';\nexport default SearchBar;","import React,{useState, useEffect, useContext} from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport useDebounce from '../../hooks/useDebounce';\nimport  ModalContext from \"../../hooks/ModalContext\";\nimport api from '../../api';\n\nconst SearchBar = ({onSelectCity}) => {\n    const [options, setoptions] = useState([]);\n    const [value, setvalue] = useState('');\n     const debouncedSearchTerm = useDebounce(value, 250);\n     const {setModalData} = useContext(ModalContext);\n\n     const getCities = async (oldValue, signal) => {\n        try {\n            const cities = await api.getCities(oldValue, {signal});\n            const mapCities = cities.map((city) => {\n                const {LocalizedName, Key} = city;\n                return {name: LocalizedName, key: Key};\n            })\n            setoptions(mapCities);\n        }\n        catch(error) {\n            if (error.name === 'AbortError') {\n                console.log('Fetch aborted');\n            }\n            else {\n                setModalData(true, \"error\", error.message);\n            }\n        };\n    }\n\n     useEffect(() => {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n         if (debouncedSearchTerm) {\n            getCities(debouncedSearchTerm, signal);\n        }\n        else {\n            setoptions([]);\n        }\n\n        return () => {\n            controller.abort();\n        }\n     },[debouncedSearchTerm]);\n\n    return (\n        <Row className=\"justify-content-center\">\n            <Form.Group as={Col} xs=\"10\" md=\"5\">\n                <Typeahead\n                    options={options}\n                    labelKey={option => `${option.name}`}\n                    id=\"TypeaheadCity\"\n                    onInputChange={setvalue}\n                    onChange={onSelectCity}\n                    placeholder=\"Search city\"\n                />\n            </Form.Group>\n        </Row>\n    );\n}\n \nexport default SearchBar;","import {useState, useEffect} from 'react';\n\nexport default (value, delay) => {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n  \n    useEffect(\n      () => {\n        const handler = setTimeout(() => {\n          setDebouncedValue(value);\n        }, delay);\n  \n        return () => {\n          clearTimeout(handler);\n        };\n      },\n      [value, delay]\n    );\n  \n    return debouncedValue;\n  }","import SelectdCityCard from './SelectdCityCard';\nexport default SelectdCityCard;","import React, {useState, useContext} from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport { useEffect } from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport  ModalContext from \"../../hooks/ModalContext\";\nimport api from '../../api';\n\nconst SelectdCityCard = ({selectedCity}) => {\n    const [celsius, setcelsius] = useState(0);\n    const [isLoading, setisLoading] = useState(true);\n    const {setModalData} = useContext(ModalContext);\n    const {name, key} = selectedCity;\n\n\n    const getCurrConditions = async (currentKey,signal ) => {\n        try {\n            const data = await api.getCurrConditions(currentKey, signal);\n            const {Temperature} = data[0];\n            const {Metric} = Temperature;\n\n            setcelsius(Metric.Value);\n            setisLoading(false);\n        }\n        catch(error) {\n            if (error.name === 'AbortError') {\n                console.log('Fetch aborted');\n            }\n            else {\n                setModalData(true, \"error\", error.message);\n            }\n        }\n    };\n\n    useEffect(() => {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        setisLoading(true);\n        getCurrConditions(key, signal);\n\n        return () => {\n            controller.abort();\n        }\n    }, [key]);\n\n    return (\n        <Col className=\"d-flex justify-content-center justify-content-sm-start m-2\">\n            <Card style={{ width: '10rem' }}>\n                <Card.Body className=\"text-center\">\n                    <Card.Title>{name}</Card.Title>\n                    {\n                        isLoading ?\n                        <Spinner animation=\"border\" size=\"sm\" />\n                        :\n                        <Card.Text>\n                            {Math.round(celsius)}˚C\n                        </Card.Text>\n                    }\n                </Card.Body>\n            </Card>\n        </Col>\n    );\n}\n \nexport default SelectdCityCard;","import FavHeartIcon from './FavHeartIcon';\nexport default FavHeartIcon;","import React from 'react';\nimport { BsHeart,BsHeartFill } from 'react-icons/bs';\nimport { Col } from 'react-bootstrap';\n\nconst FavHeartIcon = ({isFill}) => {\n    return (\n        <Col className=\"align-self-center justify-content-center\">\n            {\n                isFill ?\n                <BsHeartFill size=\"3em\"/>\n                :\n                <BsHeart size=\"3em\"/>\n            }\n        </Col>\n    );\n}\n \nexport default FavHeartIcon;","export default {\n    ADD_TO_FAVORITES: 'ADD_TO_FAVORITES',\n    REMOVE_FROM_FAVORITES: 'REMOVE_FROM_FAVORITES',\n}","import React from 'react';\nimport { Button, ButtonGroup,Col } from 'react-bootstrap';\nimport FavHeartIcon from '../FavHeartIcon';\nimport { connect,useSelector } from 'react-redux';\nimport {addToFavorites, removeFormFavorites} from '../../modules/favorites/actions';\n\nconst text = {\n    add: \"Add To Favorites\",\n    remove: \"Remove From Favorites\"\n}\n\nconst FavoritesButton = ({cityKey, cityName, addCityToFavorites, removeCityFormFavorites}) => {\n    const isFill = useSelector((state) => {\n        const {favorites} = state;\n        return favorites.some((favorite) => {\n            return favorite.cityKey === cityKey;\n        })\n    });\n\n    const handlePress = () => {\n        if (isFill) {\n            removeCityFormFavorites(cityKey);\n        }\n        else {\n            addCityToFavorites({cityKey, cityName});\n        }\n    }\n\n    return (\n        <Col className=\"d-flex align-items-start justify-content-center justify-content-sm-end\">\n            <ButtonGroup>\n                <FavHeartIcon isFill={isFill}/>\n                <Button onClick={handlePress} variant=\"primary\">\n                    {isFill ?text.remove : text.add }\n                </Button> \n            </ButtonGroup>\n        </Col>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        favorites: state.favorites\n    };\n};\n\nconst mapDispatchToProps = {\n    addCityToFavorites: addToFavorites,\n    removeCityFormFavorites: removeFormFavorites,\n};\n \nexport default connect(mapStateToProps, mapDispatchToProps)(FavoritesButton);;","import actionsTypes from './actionsType';\n\nexport const addToFavorites = (id) => ({\n    type: actionsTypes.ADD_TO_FAVORITES,\n    payload: id\n});\n\nexport const removeFormFavorites = (id) => ({\n    type: actionsTypes.REMOVE_FROM_FAVORITES,\n    payload: id\n});","import FavoritesButton from './FavoritesButton';\nexport default FavoritesButton;","import OneDayForcast from './OneDayForcast';\nexport default OneDayForcast;","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Spinner from 'react-bootstrap/Spinner';\n\n\nconst OneDayForcast = ({day, temperature, isLoading}) => {\n    return (\n        <Card style={{width: '11rem'}} className=\"m-1 m-xl-2\">\n            {\n                isLoading ?\n                    <Spinner animation=\"border\" size=\"xl\" className=\"align-self-center m-4\"/>\n                :\n                    <Card.Body className=\"text-center\">\n                        <Card.Title>{day}</Card.Title>\n                        <Card.Text>\n                            {Math.round(temperature)}˚C\n                        </Card.Text>\n                    </Card.Body>\n            }\n        </Card>\n    );\n}\n \nexport default OneDayForcast;","import WeekSumCard from './WeekSumCard';\nexport default WeekSumCard;","import React, {useState, useEffect, useContext} from 'react';\nimport Row from 'react-bootstrap/Row';\nimport OneDayForcast from '../OneDayForcast';\nimport  ModalContext from \"../../hooks/ModalContext\";\nimport api from '../../api';\n\nconst WeekSumCard = ({selectedCityKey}) => {\n    const [fiveDaysData, setFiveDaysData] = useState(() => {\n        return new Array(5).fill({});\n    });\n    const [isLoading, setisLoading] = useState(true);\n    const {setModalData} = useContext(ModalContext);\n\n    const getFiveDaysForecasts = async (locationKey, signal) => {\n        try {\n            const data = await api.getFiveDaysForecasts(locationKey, signal);\n            const newData = data.DailyForecasts.map((oneDayData) => {\n                const day = new Date(oneDayData.Date).toString().slice(0,3);\n                const minTem = oneDayData.Temperature.Minimum.Value;\n                const maxTem = oneDayData.Temperature.Maximum.Value;\n                const averageTemp = (minTem + maxTem) / 2;\n\n                return ({day,temperature: averageTemp});\n            });\n\n            setFiveDaysData(newData);\n            setisLoading(false);\n        }\n        catch(error) {\n            if (error.name === 'AbortError') {\n                console.log('Fetch aborted');\n            }\n            else {\n                setModalData(true, \"error\", error.message);\n            }\n        }\n    };\n\n    useEffect(() => {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        setisLoading(true);\n        getFiveDaysForecasts(selectedCityKey, signal);\n\n        return () => {\n            controller.abort();\n        }\n        \n    },[selectedCityKey]);\n\n    return (\n        <Row className=\"flex-column flex-sm-row align-self-center justify-content-center m-4\">\n            {\n                fiveDaysData.map((oneDayData, index)=> {\n                    const {day, temperature} = oneDayData;\n                    const key = selectedCityKey + index;\n                    return <OneDayForcast key={key} isLoading={isLoading} day={day} temperature={temperature}/>\n                })\n            }       \n        </Row>\n    )\n}\n \nexport default WeekSumCard;","import HomeCard from './HomeCard';\nexport default HomeCard;","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport SelectdCityCard from '../SelectdCityCard';\nimport Row from 'react-bootstrap/Row';\nimport FavoritesButton from '../FavoritesButton';\nimport WeekSumCard from '../WeekSumCard';\n\nconst HomeCard = ({selectedCity}) => {\n    return ( \n        <Container>\n            <Card>\n                <Row className=\"flex-column-reverse flex-sm-row m-2\">\n                    <SelectdCityCard selectedCity={selectedCity}/>\n                    <FavoritesButton cityKey={selectedCity.key} cityName={selectedCity.name}/>\n                </Row>\n                <WeekSumCard selectedCityKey={selectedCity.key}/>\n            </Card>\n        </Container>\n     );\n}\n \nexport default HomeCard;","import React, {useState} from 'react';\nimport Container from 'react-bootstrap/Container';\nimport SearchBar from '../../component/SearchBar';\nimport HomeCard from '../../component/HomeCard';\n\n\nconst defaultCity = {name: 'tel-aviv', key: '215854'}\n\nconst HomeScreen = (props) => {\n    const [selectedCity, setselectedCity] = useState(defaultCity);\n    return (\n        <Container>\n            <SearchBar onSelectCity={(city) => {\n                if (city.length > 0) {\n                    setselectedCity(city[0]);\n                }\n            }}/>\n            {\n                selectedCity ?\n                <HomeCard selectedCity={selectedCity} />\n                :\n                null\n            }\n        </Container>\n    )\n}\n \n\nexport default HomeScreen;","import HomeScreen from './HomeScreen';\nexport default HomeScreen;","import FavoriteSingleCard from './FavoriteSingleCard';\nexport default FavoriteSingleCard;","import React, {useState, useEffect, useContext} from 'react';\nimport { Card } from 'react-bootstrap';\nimport Spinner from 'react-bootstrap/Spinner';\nimport  ModalContext from \"../../hooks/ModalContext\";\nimport api from '../../api';\n\nconst FavoriteSingleCard = ({cityKey, cityName}) => {\n    const [data, setData] = useState({});\n    const [isLoading, setisLoading] = useState(true);\n    const {setModalData} = useContext(ModalContext);\n\n    const getCurrConditions = async (currentKey,signal) => {\n        try {\n            const data = await api.getCurrConditions(currentKey, signal);\n            const temperature = data[0].Temperature.Metric.Value;\n            const weatherText = data[0].WeatherText;\n            \n            setData({temperature, weatherText});\n            setisLoading(false);\n        }\n        catch(error) {\n            if (error.name === 'AbortError') {\n                console.log('Fetch aborted');\n            }\n            else {\n                setModalData(true, \"error\", error.message);\n            }\n        }\n    }  \n    useEffect(() => {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        setisLoading(true);\n        getCurrConditions(cityKey, signal);\n\n        return () => {\n            controller.abort();\n        }\n    },[cityKey]);\n\n\n    return (\n        <Card.Body className=\"text-center\">\n            <Card.Title>{cityName}</Card.Title>\n            {\n                isLoading ? \n                    <Spinner animation=\"border\" size=\"xl\" className=\"align-self-center m-4\"/>\n                :\n                    <Card>\n                        <Card.Text>\n                            {Math.round(data.temperature)}˚C\n                        </Card.Text>\n                        <Card.Text>\n                            {data.weatherText}\n                        </Card.Text>\n                    </Card>\n            }\n        </Card.Body>\n    );\n}\n \nexport default FavoriteSingleCard;","import FavoritesScreen from './FavoritesScreen';\nexport default FavoritesScreen;","import React, {useState} from 'react';\nimport { connect } from 'react-redux';\nimport Row from 'react-bootstrap/Row';\nimport FavoriteSingleCard from '../../component/FavoriteSingleCard';\n\nconst FavoritesScreen = ({favorites}) => {\n\n    return (\n        <Row className=\"flex-column flex-sm-row align-self-center justify-content-center m-4\">\n            {\n                favorites.length  === 0 ? \n                    \"You don't have any favorites yet\"\n                :\n                    favorites.map((favorite)=> {\n                        const {cityKey, cityName} = favorite;\n                        return <FavoriteSingleCard key={cityKey} cityKey={cityKey} cityName={cityName}/>\n                    })\n            }       \n        </Row>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        favorites: state.favorites\n    };\n};\n \nexport default connect(mapStateToProps, null)(FavoritesScreen);","export default {\n    Home: \"/\",\n    Favorites: \"/favorites\",\n}","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n  } from \"react-router-dom\";\n\nimport Home from './HomeScreen';\nimport Favorites from './FavoritesScreen';\n\nimport routesName from './routes';\n\nconst Routes = ({Header, Footer}) => {\n    return (\n        <Router >\n            {Header}\n            <Switch>\n                <Route path={routesName.Favorites}>\n                    <Favorites />\n                </Route>\n                <Route path={routesName.Home}>\n                    <Home />\n                </Route>\n            </Switch>\n            {Footer}\n      </Router>\n    );\n}\n \nexport default Routes;","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav';\nimport { useHistory } from \"react-router-dom\";\nimport routesName from '../../router/routes';\n\nconst navConfigure = [\n    {\n        name: \"Home\",\n        eventKey: routesName.Home,\n        isDisable: false,\n    },\n    {\n        name: \"Favorites\",\n        eventKey: routesName.Favorites,\n        isDisable: false,\n    }\n]\n\n\nconst CustomNavbar = () => {\n    const history = useHistory();\n\n    const navigate = (key) => {\n        history.push(key);\n    }\n\n    return (\n        <Navbar  className=\"justify-content-between\">\n            <h5>Herolo weather task</h5>\n            <Nav \n                defaultActiveKey=\"/\"\n                fill\n                variant=\"tabs\"\n                className=\"mr-sm-2\"\n                onSelect={navigate}\n            >\n                {\n                    navConfigure.map((navElment) => {\n                        const {eventKey, name} = navElment;\n                    return <Nav.Link key={eventKey} eventKey={eventKey} >{name}</Nav.Link>\n                    })\n                }\n            </Nav>\n        </Navbar>\n    );\n}\n \nexport default CustomNavbar;","import Navbar from './Navbar';\nexport default Navbar;","import Modal from './Modal';\nexport default Modal;","import React, {useState} from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport { useEffect } from 'react';\n\nconst CustomModal = ({modalData, setModalData}) => {\n    const {isShowModal, title, text} = modalData;\n\n    return (\n        <Modal\n            size=\"sm\"\n            show={isShowModal}\n            onHide={() => setModalData({isShowModal: false})}\n            aria-labelledby=\"example-modal-sizes-title-sm\"\n        >\n            <Modal.Header closeButton>\n            <Modal.Title id=\"example-modal-sizes-title-sm\">\n                {title}\n            </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>{text}</Modal.Body>\n        </Modal>\n    );\n}\n \nexport default CustomModal;","import ActionsType from './actionsType';\n\n\nconst initialState = {\n    favorites: []\n};\n\nconst favoritesReducer = (state = initialState, action) => {\n    let favorites;\n\n    switch (action.type) {\n        case ActionsType.ADD_TO_FAVORITES:\n            favorites = state.favorites.slice();\n            favorites.push(action.payload);\n        return {...state, favorites};\n\n        case ActionsType.REMOVE_FROM_FAVORITES:\n            favorites = state.favorites.filter((cityData) => {\n                return cityData.cityKey !== action.payload;\n            })\n        return {...state, favorites};\n      default:\n        return state;\n    }\n};\n\nexport default favoritesReducer;","import {createStore} from 'redux';\nimport favoritesReducer from '../modules/favorites/reducer';\n\n\nlet store = createStore(favoritesReducer);\n\n\nexport default store;","import React, {useState} from \"react\";\n// import Navbar from \"react-bootstrap/Navbar\";\n\nimport Router from './router';\nimport Navbar from \"./component/Navbar\";\nimport Modal from \"./component/Modal\";\nimport  ModalContext from \"./hooks/ModalContext\";\nimport store from './redux';\nimport { Provider } from 'react-redux';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\n\nfunction App() {\n  const [modalData, setModalData] = useState({});\n\n\n  return (\n    <Provider store={store}>\n      <ModalContext.Provider value={\n        {setModalData: (isShowModal, title, text) => setModalData({isShowModal, title, text})}\n        }>\n        <Router\n          Header={<Navbar/>}\n        />\n        <Modal setModalData={setModalData} modalData={modalData}/>\n      </ModalContext.Provider>\n      </Provider>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}